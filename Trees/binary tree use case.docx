package BinarySearchTree;

import java.util.Scanner;

public class BinaryUse {
	public static void printtreelevelwise(BinaryTreeNode<Integer> root) {
		Queue<BinaryTreeNode<Integer>> pendingnodes=new Queue<>();
		pendingnodes.enqueue(root);
		while(!pendingnodes.isEmpty()) {
			BinaryTreeNode<Integer> front;
			try {
				front=pendingnodes.dequeue();
			} catch (QueueEmptyException e) {
				// TODO Auto-generated catch block
				return ;
			}
			System.out.print(front.data+":");
			if(front.left!=null) {
				pendingnodes.enqueue(front.left);
			System.out.print("L:" + front.left.data + ",");
		} else {
			System.out.print("L:" + "-1" + ",");
		}
			if(front.right!=null) {
				pendingnodes.enqueue(front.right);
			System.out.print("R:" + front.right.data + ",");
		} else {
			System.out.print("R:" + "-1" + ",");
			System.out.println();
		}
			
		}
		
	}
	public static BinaryTreeNode<Integer> takeinputwise(){
		Scanner s=new Scanner(System.in);
	    Queue<BinaryTreeNode<Integer>> pendingnodes=new Queue<>();
	    System.out.println("Enter root data");
	    int rootdata=s.nextInt();
	    if(rootdata==-1) {
	    	return null;
	    }
	    BinaryTreeNode<Integer> root=new BinaryTreeNode<>(rootdata);
	    pendingnodes.enqueue(root);
	    while(!pendingnodes.isEmpty()) {
	    	BinaryTreeNode<Integer> front;
	    	try {
				front=pendingnodes.dequeue();
			} catch (QueueEmptyException e) {
				// TODO Auto-generated catch block
			return null;
			}
	    	System.out.println("Enter the leftchild of "+front.data);
            int leftChild=s.nextInt();
			if (leftChild != -1) {
				BinaryTreeNode<Integer> child = new BinaryTreeNode<Integer>(leftChild);
				pendingnodes.enqueue(child);
				front.left = child;
			}
			System.out.println("Enter the rightchild of "+front.data);
            int rightChild=s.nextInt();
			if (rightChild != -1) {
				BinaryTreeNode<Integer> child = new BinaryTreeNode<Integer>(rightChild);
				pendingnodes.enqueue(child);
				front.right = child;
		
	    	
	    }
	    }
		return root;
	    
	    

		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BinaryTreeNode<Integer> root=takeinputwise();
		printtreelevelwise(root);
		

	}

}
