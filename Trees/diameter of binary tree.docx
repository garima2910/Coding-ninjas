package BinarySearchTree;
import java.util.Scanner;

public class Diameterofbinarytree {

	public static void printTree(BinaryTreeNode<Integer> root) {
		if (root == null) {
			return;
		}
		String toBePrinted = root.data + "";
		if (root.left != null) {
			toBePrinted += "L:" + root.left.data + ",";
		}
		
		if (root.right != null) {
			toBePrinted += "R:" + root.right.data;
		}
		System.out.println(toBePrinted);
		printTree(root.left);
		printTree(root.right);
	}
	
	public static BinaryTreeNode<Integer> takeInput(Scanner s) {
		int rootData;
		System.out.println("Enter root data");
		rootData = s.nextInt();
		if (rootData == -1) {
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		root.left = takeInput(s);
		root.right = takeInput(s);
		return root;
	}
	
	public static BinaryTreeNode<Integer> takeInputLevelWise() {
		Scanner s = new Scanner(System.in);
		QueueUsingLL<BinaryTreeNode<Integer>> pendingNodes = new QueueUsingLL<>();
		System.out.println("Enter root data");
		int rootData = s.nextInt();
		if (rootData == -1) {
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		pendingNodes.enqueue(root);
		
		while (!pendingNodes.isEmpty()) {
			BinaryTreeNode<Integer> front;
			try {
				front = pendingNodes.dequeue();
			} catch (QueueEmptyException e) {
				return null;
			}
			System.out.println("Enter left child of " + front.data);
			int leftChild = s.nextInt();
			if (leftChild != -1) {
				BinaryTreeNode<Integer> child = new BinaryTreeNode<Integer>(leftChild);
				pendingNodes.enqueue(child);
				front.left = child;
			}
			
			System.out.println("Enter right child of " + front.data);
			int rightChild = s.nextInt();
			if (rightChild != -1) {
				BinaryTreeNode<Integer> child = new BinaryTreeNode<Integer>(rightChild);
				pendingNodes.enqueue(child);
				front.right = child;
			}
		}
		return root;
	}
	

	private static int diameter(BinaryTreeNode<Integer> root) {
		// TODO Auto-generated method stub
		if(root==null) {
			return 0;
		}
		int op1=height(root.left)+height(root.right);
		int op2=diameter(root.left);
		int op3=diameter(root.right);
		return Math.max(op1, Math.max(op2, op3));
		
	}
	
	public static Pair<Integer,Integer> heightdiameter(BinaryTreeNode<Integer> root){
		if(root==null) {
			Pair<Integer,Integer> output=new Pair<>();
			output.first=0;
			output.second=0;
			return output;
		}
		Pair<Integer,Integer> lo=heightdiameter(root.left);
		Pair<Integer,Integer> ro=heightdiameter(root.right);
		int height=1+Math.max(lo.first, ro.first);
		int op1=lo.first+ro.first;
		int op2=lo.second;
		int op3=ro.second;
		int diameter=Math.max(op1, Math.max(op2, op3));
		Pair<Integer,Integer> output=new Pair<>();
		output.first=height;
		output.second=diameter;
		return output;
		
		
	}
	
	private static int height(BinaryTreeNode<Integer> root) {
		// TODO Auto-generated method stub
		if(root==null) {
			return 0;
		}
		int lh=height(root.left);
		int rh=height(root.right);
		int max=Math.max(lh, rh);
		return 1+max;
	}

	public static void main(String[] args) {
		BinaryTreeNode<Integer> root = takeInputLevelWise();
		printTree(root);
		System.out.println("diameter:" + diameter(root));
//		better diameter calculation function with complexity of o(n)
		System.out.println("diameter:" + heightdiameter(root).second);
//		also printing the height of the tree 
		System.out.println("height:"+heightdiameter(root).first);
		
	}

	
}

