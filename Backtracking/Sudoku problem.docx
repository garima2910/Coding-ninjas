import java.util.Scanner;

public class Sodukuproblem {

		public static void main(String[] args) {
			Scanner s = new Scanner(System.in);

			int board[][] = new int[9][9];
			for(int i = 0; i < 9; i++){
				for(int j = 0; j < 9; j++){
					board[i][j] = s.nextInt();
				}
			}
			System.out.println(solveSudoku(board));	
		}

 public static boolean isSafe(int[][] board,int row, int col,  int num) 
{ 
	 

for (int d = 0; d < board.length; d++) { 

if (board[row][d] == num) { 
    return false; 
} 
} 


for (int r = 0; r < board.length; r++) { 
 

if (board[r][col] == num) { 
    return false; 
} 
} 


int sqrt = (int)Math.sqrt(board.length); 
int boxRowStart = row - row % sqrt; 
int boxColStart = col - col % sqrt; 

for (int r = boxRowStart; 
 r < boxRowStart + sqrt; r++) { 
for (int d = boxColStart; 
     d < boxColStart + sqrt; d++) { 
    if (board[r][d] == num) { 
        return false; 
    } 
} 
} 


return true; 
} 

public static boolean solveSudoku( 
int[][] board) 
{ 
int n=9;	
int row = -1; 
int col = -1; 
boolean isEmpty = true; 
for (int i = 0; i < n; i++) { 
for (int j = 0; j < n; j++) { 
    if (board[i][j] == 0) { 
        row = i; 
        col = j;  
        isEmpty = false; 
        break; 
    } 
} 
if (!isEmpty) { 
    break; 
} 
} 

if (isEmpty) { 
return true; 
} 

for (int num = 1; num <= n; num++) { 
if (isSafe(board, row, col, num)) { 
    board[row][col] = num; 
    if (solveSudoku(board)) { 
        return true; 
    } 
    else { 
        
        board[row][col] = 0; 
    } 
} 
} 
return false; 
}
}