import java.util.Scanner;

class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;
	
	public LinkedListNode(T data) {
		this.data = data;
	}
}

public class MergeTwosortedLL {
	
	static Scanner s = new Scanner(System.in);
	
	public static LinkedListNode<Integer> takeInput() {
		LinkedListNode<Integer> head = null, tail = null;
		int data = s.nextInt();
		while(data != -1) {
			LinkedListNode<Integer> newNode = new LinkedListNode<Integer>(data);
			if(head == null) {
				head = newNode;
				tail = newNode;
			}
			else {
				tail.next = newNode;
				tail = newNode;
			}
			data = s.nextInt();
		}
		return head;
	}
	
	public static void print(LinkedListNode<Integer> head){
		while(head != null){
			System.out.print(head.data +" ");
			head = head.next;
		}
		System.out.println();
	}
	
	public static void main(String[] args) {
		LinkedListNode<Integer> head1 = takeInput();
		LinkedListNode<Integer> head2 = takeInput();
		LinkedListNode<Integer> head3 = mergeTwoList(head1, head2);
		print(head3);
	}

	private static LinkedListNode<Integer> mergeTwoList(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
		// TODO Auto-generated method stub
		 LinkedListNode<Integer> headpoint=null;
			LinkedListNode<Integer> tailpoint=null;
			if(head1.data<head2.data) {
				headpoint=head1;
				tailpoint=head1;
					head1=head1.next;
				}
			else { 
				headpoint = head2; 
				tailpoint = head2; 
				head2 = head2.next; 
			} 
			while (head1 != null && head2 != null) { 
				if (head1.data < head2.data) { 
					tailpoint.next = head1; 
					tailpoint = tailpoint.next; 
					head1 = head1.next; 
				} else { 
					tailpoint.next = head2; 
					tailpoint = tailpoint.next; 
					head2 = head2.next; 
				} 
			} 
			if (head1 != null) { 
				tailpoint.next = head1; 
			} 
			if (head2 != null) { 
				tailpoint.next = head2; 
			} 
			return headpoint; 
		}
}