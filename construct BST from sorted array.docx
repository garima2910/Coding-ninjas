package BinarySearchTree;

import java.util.Scanner;
class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}

public class constructbstfromarray {
	
	private static Scanner sc = new Scanner(System.in);

	public static void main(String[] args) {
		int len = sc.nextInt();
		int[] arr = new int[len];
		for(int i = 0; i < len; ++i) {
			arr[i] = sc.nextInt();
		}
		BinaryTreeNode<Integer> ans = SortedArrayToBST(arr);
		
		preOrder(ans);
	}
	
	private static BinaryTreeNode<Integer> SortedArrayToBST(int[] arr) {
		// TODO Auto-generated method stub
		BinaryTreeNode<Integer> root=SortedArrayToBST(arr,0,arr.length-1);
		return root;
	}

	private static BinaryTreeNode<Integer> SortedArrayToBST(int[] arr, int sindex, int eindex) {
		// TODO Auto-generated method stub
		if(sindex>eindex) {
			return null;
		}
	
		int mid=(sindex+eindex)/2;
		BinaryTreeNode<Integer> root=new BinaryTreeNode<>(arr[mid]);
		root.left=SortedArrayToBST(arr,sindex,mid-1);
		root.right=SortedArrayToBST(arr,mid+1,eindex);
		return root;
		
		
	}

	private static void preOrder(BinaryTreeNode<Integer> root) {
		if(root == null) {
			return;
		}
		System.out.print(root.data+" ");
		preOrder(root.left);
		preOrder(root.right);
	}
}

